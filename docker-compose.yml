version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: oncall-agent-backend
    ports:
      - "8000:8000"
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CLAUDE_MODEL=${CLAUDE_MODEL:-claude-3-5-sonnet-20241022}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app
    networks:
      - oncall-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: oncall-agent-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - oncall-network
    restart: unless-stopped

  # PostgreSQL for frontend (Next.js SaaS starter uses Postgres)
  postgres:
    image: postgres:16-alpine
    container_name: oncall-agent-db
    environment:
      - POSTGRES_DB=oncall_agent
      - POSTGRES_USER=oncall_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - oncall-network
    restart: unless-stopped

  # Redis for caching and real-time updates (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: oncall-agent-redis
    ports:
      - "6379:6379"
    networks:
      - oncall-network
    restart: unless-stopped

networks:
  oncall-network:
    driver: bridge

volumes:
  postgres_data: