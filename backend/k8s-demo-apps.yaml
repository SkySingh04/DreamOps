---
# Scenario 1: CrashLoopBackOff - Missing Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: demo-apps
  labels:
    app: payment-service
    scenario: config-error
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
    spec:
      containers:
      - name: payment-app
        image: busybox
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          echo "Starting payment service..."
          echo "Loading configuration from /config/app.conf..."
          if [ ! -f /config/app.conf ]; then
            echo "ERROR: Configuration file /config/app.conf not found!"
            echo "FATAL: Cannot start without configuration"
            exit 1
          fi
          echo "Config loaded successfully"
          while true; do
            echo "Processing payments..."
            sleep 10
          done
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: demo-apps
spec:
  selector:
    app: payment-service
  ports:
  - port: 8080
    targetPort: 8080
---
# Scenario 2: ImagePullBackOff - Non-existent Image
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: demo-apps
  labels:
    app: analytics-service
    scenario: image-pull-error
spec:
  replicas: 2
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      labels:
        app: analytics-service
    spec:
      containers:
      - name: analytics
        image: nonexistent/analytics:v1.0.0
        ports:
        - containerPort: 8080
        env:
        - name: SERVICE_NAME
          value: "analytics"
---
# Scenario 3: OOMKilled - Memory Exhaustion
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-hog
  namespace: demo-apps
  labels:
    app: memory-hog
    scenario: oom-killed
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-hog
  template:
    metadata:
      labels:
        app: memory-hog
    spec:
      containers:
      - name: memory-consumer
        image: python:3.9-slim
        command: ["python", "-c"]
        args:
        - |
          import time
          data = []
          print("Starting memory consumption...")
          while True:
              # Allocate 10MB every second
              data.append("x" * 10 * 1024 * 1024)
              print(f"Allocated {len(data) * 10}MB")
              time.sleep(1)
        resources:
          requests:
            memory: "50Mi"
            cpu: "100m"
          limits:
            memory: "100Mi"
            cpu: "200m"
---
# Scenario 4: High CPU Usage
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-intensive
  namespace: demo-apps
  labels:
    app: cpu-intensive
    scenario: high-cpu
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cpu-intensive
  template:
    metadata:
      labels:
        app: cpu-intensive
    spec:
      containers:
      - name: cpu-consumer
        image: alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Starting CPU intensive workload..."
          while true; do
            # Perform CPU intensive calculation
            echo "scale=10000; 4*a(1)" | bc -l > /dev/null 2>&1 || true
          done
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
---
# Scenario 5: Database Connection Error
apiVersion: apps/v1
kind: Deployment
metadata:
  name: broken-database
  namespace: demo-apps
  labels:
    app: broken-database
    scenario: db-error
spec:
  replicas: 1
  selector:
    matchLabels:
      app: broken-database
  template:
    metadata:
      labels:
        app: broken-database
    spec:
      containers:
      - name: postgres
        image: postgres:14
        env:
        - name: POSTGRES_PASSWORD
          value: ""  # Missing required password - will crash
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
# Scenario 6: Service with No Endpoints
apiVersion: v1
kind: Service
metadata:
  name: orphan-service
  namespace: demo-apps
  labels:
    scenario: no-endpoints
spec:
  selector:
    app: non-existent-app
  ports:
  - port: 80
    targetPort: 8080
---
# Scenario 7: Deployment Scale Down to Zero
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: demo-apps
  labels:
    app: frontend-app
    scenario: zero-replicas
spec:
  replicas: 0  # Scaled down to zero
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
---
# Scenario 8: Working Application (for contrast)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthy-app
  namespace: demo-apps
  labels:
    app: healthy-app
    scenario: healthy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: healthy-app
  template:
    metadata:
      labels:
        app: healthy-app
    spec:
      containers:
      - name: echo-server
        image: ealen/echo-server:latest
        ports:
        - containerPort: 80
        env:
        - name: PORT
          value: "80"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: healthy-app
  namespace: demo-apps
spec:
  selector:
    app: healthy-app
  ports:
  - port: 80
    targetPort: 80