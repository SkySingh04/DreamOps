version: '3.8'

services:
  grafana:
    image: grafana/grafana:latest
    container_name: test-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Default admin credentials for testing
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      
      # Allow anonymous access for testing
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      
      # Disable user signup
      - GF_USERS_ALLOW_SIGN_UP=false
      
      # Enable API key authentication
      - GF_AUTH_API_KEYS_ENABLED=true
      
      # Configure default organization
      - GF_ORG_NAME=OnCall Agent Testing
      
      # Set timezone
      - GF_DEFAULT_TIMEZONE=UTC
      
      # Logging configuration
      - GF_LOG_LEVEL=info
      
    volumes:
      # Persist Grafana data
      - grafana-storage:/var/lib/grafana
      
      # Custom configuration and provisioning
      - ./grafana-provisioning:/etc/grafana/provisioning
      
    networks:
      - grafana-net
    
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  prometheus:
    image: prom/prometheus:latest
    container_name: test-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus-config:/etc/prometheus
      - prometheus-storage:/prometheus
    networks:
      - grafana-net
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sample application for generating metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: test-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - grafana-net
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sample application with custom metrics
  sample-app:
    image: nginx:alpine
    container_name: test-sample-app
    restart: unless-stopped
    ports:
      - "8080:80"
    networks:
      - grafana-net
    volumes:
      - ./sample-app-config:/etc/nginx/conf.d
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  grafana-storage:
    driver: local
  prometheus-storage:
    driver: local

networks:
  grafana-net:
    driver: bridge

# Usage Instructions:
# 1. Start the test environment:
#    docker-compose up -d
#
# 2. Wait for services to be healthy:
#    docker-compose ps
#
# 3. Access Grafana:
#    URL: http://localhost:3000
#    Username: admin
#    Password: admin123
#
# 4. Create API key for testing:
#    - Go to Configuration -> API Keys
#    - Create new key with Admin role
#    - Copy the key for use in tests
#
# 5. Prometheus is available at:
#    URL: http://localhost:9090
#
# 6. Run tests with the environment:
#    export GRAFANA_MCP_URL=http://localhost:3000
#    export GRAFANA_MCP_API_KEY=your-generated-api-key
#    pytest tests/integrations/grafana/ -v
#
# 7. Stop the test environment:
#    docker-compose down -v